(self.webpackChunkmpeg_coder=self.webpackChunkmpeg_coder||[]).push([[84],{852:function(e,t){"use strict";t.Z={body:'<g fill="currentColor"><path fill-rule="evenodd" clip-rule="evenodd" d="M14.431 3.323l-8.47 10l-.79-.036l-3.35-4.77l.818-.574l2.978 4.24l8.051-9.506l.764.646z"/></g>',width:16,height:16}},6075:function(e,t){"use strict";t.Z={body:'<g fill="currentColor"><path d="M11.34 9.71h.71l2.67-2.67v-.71L13.38 5h-.7l-1.82 1.81h-5V5.56l1.86-1.85V3l-2-2H5L1 5v.71l2 2h.71l1.14-1.15v5.79l.5.5H10v.52l1.33 1.34h.71l2.67-2.67v-.71L13.37 10h-.7l-1.86 1.85h-5v-4H10v.48l1.34 1.38zm1.69-3.65l.63.63l-2 2l-.63-.63l2-2zm0 5l.63.63l-2 2l-.63-.63l2-2zM3.35 6.65l-1.29-1.3l3.29-3.29l1.3 1.29l-3.3 3.3z"/></g>',width:16,height:16}},965:function(e,t){"use strict";t.Z={body:'<path fill-rule="evenodd" d="M4 1.75C4 .784 4.784 0 5.75 0h5.586c.464 0 .909.184 1.237.513l2.914 2.914c.329.328.513.773.513 1.237v8.586A1.75 1.75 0 0 1 14.25 15h-9a.75.75 0 0 1 0-1.5h9a.25.25 0 0 0 .25-.25V6h-2.75A1.75 1.75 0 0 1 10 4.25V1.5H5.75a.25.25 0 0 0-.25.25v2.5a.75.75 0 0 1-1.5 0v-2.5zm7.5-.188V4.25c0 .138.112.25.25.25h2.688a.252.252 0 0 0-.011-.013l-2.914-2.914a.272.272 0 0 0-.013-.011zM5.72 6.72a.75.75 0 0 0 0 1.06l1.47 1.47l-1.47 1.47a.75.75 0 1 0 1.06 1.06l2-2a.75.75 0 0 0 0-1.06l-2-2a.75.75 0 0 0-1.06 0zM3.28 7.78a.75.75 0 0 0-1.06-1.06l-2 2a.75.75 0 0 0 0 1.06l2 2a.75.75 0 0 0 1.06-1.06L1.81 9.25l1.47-1.47z" fill="currentColor"/>',width:16,height:16}},5549:function(e,t,a){"use strict";a.d(t,{A:function(){return d},q:function(){return l}});var n=a(7294),r=a(6742),i="https://github.com/cainmagi/FFmpeg-Encoder-Decoder-for-Python/blob/c2f41bfc95c9c87f91e3a6f59df9b2e6b66e683b/MpegCoder";function d(e){var t=i+"/"+e.url;return n.createElement(r.Z,{to:t,className:"noline"},e.children)}function l(e){return n.createElement("span",{style:{padding:"0 "+e.padx}},"\xb7")}l.defaultProps={padx:"1ex"}},7852:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return c},contentTitle:function(){return k},metadata:function(){return N},toc:function(){return u},default:function(){return f}});var n=a(2122),r=a(9756),i=(a(7294),a(3905)),d=a(8617),l=a(5514),o=a(6075),p=a(852),m=a(965),s=a(5549),h=["components"],c={id:"MpegServer",title:"MpegServer",sidebar_label:"MpegServer",slug:"/apis/MpegServer",description:"This class has wrapped the C-API of FFMpeg stream server so that users could call its methods to server streamed frames by using numpy-data quickly."},k=void 0,N={unversionedId:"apis/MpegServer",id:"apis/MpegServer",isDocsHomePage:!1,title:"MpegServer",description:"This class has wrapped the C-API of FFMpeg stream server so that users could call its methods to server streamed frames by using numpy-data quickly.",source:"@site/docs/apis/MpegServer.mdx",sourceDirName:"apis",slug:"/apis/MpegServer",permalink:"/FFmpeg-Encoder-Decoder-for-Python/docs/apis/MpegServer",editUrl:"https://github.com/cainmagi/FFmpeg-Encoder-Decoder-for-Python/edit/docs/docs/apis/MpegServer.mdx",version:"current",frontMatter:{id:"MpegServer",title:"MpegServer",sidebar_label:"MpegServer",slug:"/apis/MpegServer",description:"This class has wrapped the C-API of FFMpeg stream server so that users could call its methods to server streamed frames by using numpy-data quickly."},sidebar:"apis",previous:{title:"MpegClient",permalink:"/FFmpeg-Encoder-Decoder-for-Python/docs/apis/MpegClient"}},u=[{value:"Arguments",id:"arguments",children:[]},{value:"Methods",id:"methods",children:[{value:"<code>clear</code>",id:"clear",children:[]},{value:"<code>resetPath</code>",id:"resetpath",children:[]},{value:"<code>getParameter</code>",id:"getparameter",children:[]},{value:"<code>setParameter</code>",id:"setparameter",children:[]},{value:"<code>FFmpegSetup</code>",id:"ffmpegsetup",children:[]},{value:"<code>dumpFile</code>",id:"dumpfile",children:[]},{value:"<code>ServeFrame</code>",id:"serveframe",children:[]},{value:"<code>ServeFrameBlock</code>",id:"serveframeblock",children:[]},{value:"<code>FFmpegClose</code>",id:"ffmpegclose",children:[]}]},{value:"Operators",id:"operators",children:[{value:"<code>__str__</code>",id:"__str__",children:[]}]},{value:"Examples",id:"examples",children:[{value:"Optimize the video encoding",id:"optimize-the-video-encoding",children:[]},{value:"Rescale and resample the video",id:"rescale-and-resample-the-video",children:[]},{value:"Use multi-thread encoding",id:"use-multi-thread-encoding",children:[]},{value:"Configure the ahead frame number manually",id:"configure-the-ahead-frame-number-manually",children:[]}]}],g={toc:u};function f(e){var t=e.components,a=(0,r.Z)(e,h);return(0,i.kt)("wrapper",(0,n.Z)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)(l.Z,{icon:o.Z,mdxType:"InlineIcon"})," Class",(0,i.kt)(s.q,{mdxType:"Splitter"}),(0,i.kt)(s.A,{url:"MpegStreamer.h#L114",mdxType:"SourceURL"},(0,i.kt)(l.Z,{icon:m.Z,mdxType:"InlineIcon"})," Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"sev = mpegCoder.MpegServer()\n")),(0,i.kt)("p",null,"The frame-level video stream service used for pushing an online video stream."),(0,i.kt)("p",null,"This service instance is integrated with the features of ",(0,i.kt)("a",{parentName:"p",href:"./MpegEncoder"},(0,i.kt)("inlineCode",{parentName:"a"},"MpegEncoder")),". Like the ",(0,i.kt)("a",{parentName:"p",href:"https://trac.ffmpeg.org/wiki/StreamingGuide",title:"FFMpeg used for streaming"},"FFMpeg CLI usages"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"MpegServer")," could not be run independently. A server program is required to be launched before the instance getting set up. We recommend some server programs ",(0,i.kt)("a",{parentName:"p",href:"../examples/server#preparation"},"here"),"."),(0,i.kt)("p",null,"In practice, we recommend to split this instance into a sub-process, and use the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/multiprocessing.html",title:"multiprocessing | Python"},(0,i.kt)("inlineCode",{parentName:"a"},"multiprocessing"),(0,i.kt)(d.Z,{mdxType:"IconExternalLink"}))," to feed the served data. See the ",(0,i.kt)("a",{parentName:"p",href:"../examples/server#dual-process-example"},"tutorial")," to find the example. Although this class also provides a non-blocking style API, we do not recommend users to use that. "),(0,i.kt)("h2",{id:"arguments"},"Arguments"),(0,i.kt)("p",null,"This class does not has initialization arguments."),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"clear"},(0,i.kt)("inlineCode",{parentName:"h3"},"clear")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"sev.clear()\n")),(0,i.kt)("p",null,"Clear all configurations ",(0,i.kt)("strong",{parentName:"p"},"including")," the default video path. If a video is being pushed by the server, ",(0,i.kt)("inlineCode",{parentName:"p"},"clear()")," will close the video automatically."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"We suggest that users should call ",(0,i.kt)("inlineCode",{parentName:"p"},"clear()")," manually, like using other file writers."))),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"resetpath"},(0,i.kt)("inlineCode",{parentName:"h3"},"resetPath")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"sev.resetPath(videoAddress)\n")),(0,i.kt)("p",null,"Reset the default video address to a specific value. Configuring this value will not cause the video to be pushed. This method is merely used as a configuration."),(0,i.kt)("h4",{id:"requires"},"Requires"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Argument"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Required"),(0,i.kt)("th",{parentName:"tr",align:"left"},(0,i.kt)("center",null,"Description")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"videoAddress")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"str")," or ",(0,i.kt)("inlineCode",{parentName:"td"},"bytes")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)(l.Z,{icon:p.Z,mdxType:"InlineIcon"})),(0,i.kt)("td",{parentName:"tr",align:"left"},"The address of the video stream to be pushed.")))),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"getparameter"},(0,i.kt)("inlineCode",{parentName:"h3"},"getParameter")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"param = sev.getParameter(paramName=None)\n")),(0,i.kt)("p",null,"Get the video parameter or configuration value. Each time ",(0,i.kt)("inlineCode",{parentName:"p"},"paramName")," only accepts one parameter name."),(0,i.kt)("h4",{id:"requires-1"},"Requires"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Argument"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Required"),(0,i.kt)("th",{parentName:"tr",align:"left"},(0,i.kt)("center",null,"Description")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"paramName")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"str")," or ",(0,i.kt)("inlineCode",{parentName:"td"},"bytes")),(0,i.kt)("td",{parentName:"tr",align:"center"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"The name of the parameter to be checked. If not give, all important parameters, including some private parameters will be returned as a ",(0,i.kt)("inlineCode",{parentName:"td"},"dict"),".")))),(0,i.kt)("p",null,"Here is a list of checkable ",(0,i.kt)("inlineCode",{parentName:"p"},"paramName"),":"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},(0,i.kt)("center",null,"Description")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"videoAddress")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"str")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The current address of the pushed video. If the video is not being pushed, will return the default video address.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"codecName")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"str")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The name of the encoder. See ",(0,i.kt)("a",{parentName:"td",href:"https://ffmpeg.org/ffmpeg-codecs.html#toc-Video-Encoders",title:"Video encoders of FFMpeg"},"here",(0,i.kt)(d.Z,{mdxType:"IconExternalLink"}))," to view a list of FFMpeg encoders. Note that not all encoders could be used, the avaliable encoders depends on the current FFMpeg built libraries.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"formatName")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"str")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The video format name guessed from ",(0,i.kt)("inlineCode",{parentName:"td"},"videoAddress"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"nthread")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"int")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The number of encoder threads.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"bitRate")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"float")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The bit rate of the pushed video stream (Kb/s). This value determines the served stream size directly.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"width")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"int")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The width of the pushed video stream. This value is mainly determined by the user configurations.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"height")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"int")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The height of the pushed video stream. This value is mainly determined by the user configurations.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"widthSrc")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"int")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The width of the source frame. This value should be consistent with the size of the ",(0,i.kt)("a",{parentName:"td",href:"https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html",title:"np.ndarray"},(0,i.kt)("inlineCode",{parentName:"a"},"np.ndarray"),(0,i.kt)(d.Z,{mdxType:"IconExternalLink"})),". If not given, will use ",(0,i.kt)("inlineCode",{parentName:"td"},"width"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"heightSrc")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"int")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The height of the source frame. This value should be consistent with the size of the ",(0,i.kt)("a",{parentName:"td",href:"https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html",title:"np.ndarray"},(0,i.kt)("inlineCode",{parentName:"a"},"np.ndarray"),(0,i.kt)(d.Z,{mdxType:"IconExternalLink"})),". If not given, will use ",(0,i.kt)("inlineCode",{parentName:"td"},"height"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"GOPSize")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"int")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The size of one ",(0,i.kt)("a",{parentName:"td",href:"https://en.wikipedia.org/wiki/Group_of_pictures",title:"Group of pictures | Wikipedia"},"GOP",(0,i.kt)(d.Z,{mdxType:"IconExternalLink"})),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"maxBframe")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"int")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The maximal number of consecutive B frames in a GOP. In most cases, this value could not be greater than ",(0,i.kt)("inlineCode",{parentName:"td"},"16"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"frameRate")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"tuple")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The target frame rate of the pushed video stream. This value should be a tuple of two ",(0,i.kt)("inlineCode",{parentName:"td"},"int"),"s: ",(0,i.kt)("inlineCode",{parentName:"td"},"(numerator, denominator)"),". This format is consistent with ",(0,i.kt)("a",{parentName:"td",href:"https://ffmpeg.org/doxygen/trunk/structAVRational.html",title:"AVRational"},(0,i.kt)("inlineCode",{parentName:"a"},"AVRational"),(0,i.kt)(d.Z,{mdxType:"IconExternalLink"})))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"waitRef")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"float")),(0,i.kt)("td",{parentName:"tr",align:"left"},"A wait reference with the unit of ",(0,i.kt)("inlineCode",{parentName:"td"},"second"),". This value shows that how much seconds the served data is ahead of played data. This value is required to be used with the non-blocking API ",(0,i.kt)("a",{parentName:"td",href:"#serveframe"},"ServeFrame()"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"ptsAhead")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"int")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The target ahead time duration in the unit of time stamp. This value is used for controlling the amount of ",(0,i.kt)("inlineCode",{parentName:"td"},"waitRef")," and the waiting time of the blocking API. It is converted from the configuration ",(0,i.kt)("inlineCode",{parentName:"td"},"frameAhead"),".")))),(0,i.kt)("h4",{id:"returns"},"Returns"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Argument"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},(0,i.kt)("center",null,"Description")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"param")),(0,i.kt)("td",{parentName:"tr",align:"center"},"Determined by ",(0,i.kt)("inlineCode",{parentName:"td"},"paramName")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The returned value of the parameter. If no ",(0,i.kt)("inlineCode",{parentName:"td"},"paramName")," is given, will return all important parameters.")))),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"setparameter"},(0,i.kt)("inlineCode",{parentName:"h3"},"setParameter")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"sev.setParameter(\n    decoder=None, configDict=None, videoPath=None, codecName=None,\n    nthread=None, bitRate=None, width=None, height=None, widthSrc=None, heightSrc=None,\n    GOPSize=None, maxBframe=None, frameRate=None, frameAhead=None\n)\n")),(0,i.kt)("p",null,"Set the configurations of the decoder. To make the configurations take effects, these parameters need to be configured before ",(0,i.kt)("a",{parentName:"p",href:"#ffmpegsetup"},(0,i.kt)("inlineCode",{parentName:"a"},"FFmpegSetup()")),"."),(0,i.kt)("h4",{id:"requires-2"},"Requires"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Argument"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Required"),(0,i.kt)("th",{parentName:"tr",align:"left"},(0,i.kt)("center",null,"Description")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"decoder")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("a",{parentName:"td",href:"./MpegDecoder"},(0,i.kt)("inlineCode",{parentName:"a"},"MpegDecoder"))," or ",(0,i.kt)("a",{parentName:"td",href:"./MpegClient"},(0,i.kt)("inlineCode",{parentName:"a"},"MpegClient"))),(0,i.kt)("td",{parentName:"tr",align:"center"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"When configure this argument, the required configurations will be copied from a decoder or a client. This argument is useful when trancoding a video.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"configDict")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"dict")),(0,i.kt)("td",{parentName:"tr",align:"center"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"An alternative of the argument ",(0,i.kt)("inlineCode",{parentName:"td"},"decoder")," when the parameters need to be passed through different processes. Using ",(0,i.kt)("inlineCode",{parentName:"td"},"configDict=decoder.getParameter()")," is equivalent to using ",(0,i.kt)("inlineCode",{parentName:"td"},"decoder=decoder"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"videoAddress")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"str")),(0,i.kt)("td",{parentName:"tr",align:"center"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"The current address of the pushed video. If the video is not being pushed, will return the default video address.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"codecName")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"str")),(0,i.kt)("td",{parentName:"tr",align:"center"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"The name of the encoder. See ",(0,i.kt)("a",{parentName:"td",href:"https://ffmpeg.org/ffmpeg-codecs.html#toc-Video-Encoders",title:"Video encoders of FFMpeg"},"here",(0,i.kt)(d.Z,{mdxType:"IconExternalLink"}))," to view a list of FFMpeg encoders. Note that not all encoders could be used, the avaliable encoders depends on the current FFMpeg built libraries.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"formatName")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"str")),(0,i.kt)("td",{parentName:"tr",align:"center"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"The video format name guessed from ",(0,i.kt)("inlineCode",{parentName:"td"},"videoAddress"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"nthread")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"int")),(0,i.kt)("td",{parentName:"tr",align:"center"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"The number of encoder threads.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"bitRate")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"float")),(0,i.kt)("td",{parentName:"tr",align:"center"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"The bit rate of the pushed video stream (Kb/s). This value determines the served stream size directly.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"width")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"int")),(0,i.kt)("td",{parentName:"tr",align:"center"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"The width of the pushed video stream.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"height")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"int")),(0,i.kt)("td",{parentName:"tr",align:"center"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"The height of the pushed video stream.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"widthSrc")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"int")),(0,i.kt)("td",{parentName:"tr",align:"center"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"The width of the source frame. This value should be consistent with the size of the ",(0,i.kt)("a",{parentName:"td",href:"https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html",title:"np.ndarray"},(0,i.kt)("inlineCode",{parentName:"a"},"np.ndarray"),(0,i.kt)(d.Z,{mdxType:"IconExternalLink"})),". If not given, will use ",(0,i.kt)("inlineCode",{parentName:"td"},"width"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"heightSrc")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"int")),(0,i.kt)("td",{parentName:"tr",align:"center"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"The height of the source frame. This value should be consistent with the size of the ",(0,i.kt)("a",{parentName:"td",href:"https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html",title:"np.ndarray"},(0,i.kt)("inlineCode",{parentName:"a"},"np.ndarray"),(0,i.kt)(d.Z,{mdxType:"IconExternalLink"})),". If not given, will use ",(0,i.kt)("inlineCode",{parentName:"td"},"height"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"GOPSize")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"int")),(0,i.kt)("td",{parentName:"tr",align:"center"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"The size of one ",(0,i.kt)("a",{parentName:"td",href:"https://en.wikipedia.org/wiki/Group_of_pictures",title:"Group of pictures | Wikipedia"},"GOP",(0,i.kt)(d.Z,{mdxType:"IconExternalLink"})),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"maxBframe")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"int")),(0,i.kt)("td",{parentName:"tr",align:"center"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"The maximal number of consecutive B frames in a GOP. In most cases, this value could not be greater than ",(0,i.kt)("inlineCode",{parentName:"td"},"16"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"frameRate")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"tuple")),(0,i.kt)("td",{parentName:"tr",align:"center"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"The target frame rate of the pushed video stream. This value should be a tuple of two ",(0,i.kt)("inlineCode",{parentName:"td"},"int"),"s: ",(0,i.kt)("inlineCode",{parentName:"td"},"(numerator, denominator)"),". This format is consistent with ",(0,i.kt)("a",{parentName:"td",href:"https://ffmpeg.org/doxygen/trunk/structAVRational.html",title:"AVRational"},(0,i.kt)("inlineCode",{parentName:"a"},"AVRational"),(0,i.kt)(d.Z,{mdxType:"IconExternalLink"})))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"frameAhead")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"int")),(0,i.kt)("td",{parentName:"tr",align:"center"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"The target ahead frame number. This value is used for controlling the number of served frames. For example, ",(0,i.kt)("inlineCode",{parentName:"td"},"waitRef")," will be calculated by the half of the duration between the played framed number and this value. The ",(0,i.kt)("inlineCode",{parentName:"td"},"waitRef")," and the waiting time of the blocking API ",(0,i.kt)("a",{parentName:"td",href:"#serveframeblock"},(0,i.kt)("inlineCode",{parentName:"a"},"ServeFrameBlock()"))," will be controlled by this value. Users do not need to specify it explicitly, because it could be calculated from the configured ",(0,i.kt)("inlineCode",{parentName:"td"},"GOPSize"),".")))),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"ffmpegsetup"},(0,i.kt)("inlineCode",{parentName:"h3"},"FFmpegSetup")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"sev.FFmpegSetup(videoAddress=None)\n")),(0,i.kt)("p",null,"Open the video file, and initialize the encoder. During the encoder initialization, the codec and the video format will be configured according to the file name and the user configurations set by ",(0,i.kt)("a",{parentName:"p",href:"#setparameter"},(0,i.kt)("inlineCode",{parentName:"a"},"setParameter()")),". If an video is opening by the encoder now, this video will be closed first, then the new video will be opened with the same configurations."),(0,i.kt)("h4",{id:"requires-3"},"Requires"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Argument"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Required"),(0,i.kt)("th",{parentName:"tr",align:"left"},(0,i.kt)("center",null,"Description")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"videoAddress")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"str")," or ",(0,i.kt)("inlineCode",{parentName:"td"},"bytes")),(0,i.kt)("td",{parentName:"tr",align:"center"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"The address of the video stream to be pushed. If not given, will use the default path configured by ",(0,i.kt)("a",{parentName:"td",href:"#resetpath"},(0,i.kt)("inlineCode",{parentName:"a"},"resetPath()")),". Setting this argument will also cause the default video address to change.")))),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"dumpfile"},(0,i.kt)("inlineCode",{parentName:"h3"},"dumpFile")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"sev.dumpFile()\n")),(0,i.kt)("p",null,"Print out a brief preview of the video meta-data to the standard output."),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This method is based on C stdout. Therefore, these results could not be redirected or catched by python."))),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"serveframe"},(0,i.kt)("inlineCode",{parentName:"h3"},"ServeFrame")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"is_success = sev.ServeFrame(PyArrayFrame)\n")),(0,i.kt)("p",null,"Push one frame to the video stream. Note that in most cases, the frame will not be pushed instantly. Instead of, the frames will be saved in a low-level buffer of the codec. Only when ",(0,i.kt)("a",{parentName:"p",href:"#ffmpegclose"},(0,i.kt)("inlineCode",{parentName:"a"},"FFmpegClose()"))," is called, the frames in the buffer will be flushed into the stream."),(0,i.kt)("p",null,"This is the non-blocking API, which means the current thread will be only blocked by the frame encoding operations. Users need to use this API with ",(0,i.kt)("inlineCode",{parentName:"p"},"sev.getParameter('waitRef')")," to control the served frame number. Otherwise, serving too many frames will make the data to be dropped or cause the video server to collapse. The example of this API could be found ",(0,i.kt)("a",{parentName:"p",href:"../examples/server#non-blocking-example"},"here"),"."),(0,i.kt)("h4",{id:"requires-4"},"Requires"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Argument"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Required"),(0,i.kt)("th",{parentName:"tr",align:"left"},(0,i.kt)("center",null,"Description")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"PyArrayFrame")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"np.ndarray")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)(l.Z,{icon:p.Z,mdxType:"InlineIcon"})),(0,i.kt)("td",{parentName:"tr",align:"left"},"An array with a shape of ",(0,i.kt)("inlineCode",{parentName:"td"},"(H, W, C)"),", where ",(0,i.kt)("inlineCode",{parentName:"td"},"(H, W)")," are the source height (",(0,i.kt)("inlineCode",{parentName:"td"},"heightSrc"),") and source width (",(0,i.kt)("inlineCode",{parentName:"td"},"widthSrc"),") respectively. ",(0,i.kt)("inlineCode",{parentName:"td"},"C")," means the 3 RGB channel.")))),(0,i.kt)("h4",{id:"returns-1"},"Returns"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Argument"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},(0,i.kt)("center",null,"Description")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"is_success")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"bool")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The status of the frame pushing. If the given frame succeeds to be encoded and pushed, will return ",(0,i.kt)("inlineCode",{parentName:"td"},"True"),"; Otherwise, will return ",(0,i.kt)("inlineCode",{parentName:"td"},"False"),".")))),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"serveframeblock"},(0,i.kt)("inlineCode",{parentName:"h3"},"ServeFrameBlock")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"is_success = sev.ServeFrameBlock(PyArrayFrame)\n")),(0,i.kt)("p",null,"Push one frame to the video stream. Note that in most cases, the frame will not be pushed instantly. Instead of, the frames will be saved in a low-level buffer of the codec. Only when ",(0,i.kt)("a",{parentName:"p",href:"#ffmpegclose"},(0,i.kt)("inlineCode",{parentName:"a"},"FFmpegClose()"))," is called, the frames in the buffer will be flushed into the stream."),(0,i.kt)("p",null,"This is the ",(0,i.kt)("strong",{parentName:"p"},"recommended")," blocking API, which means the method will cause the current thread blocked if the served frames are ahead of the playing time too much. In this case, the method will wait until the playing time catch the half of the served but not played frames. This method will ensure the safety of the video server."),(0,i.kt)("h4",{id:"requires-5"},"Requires"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Argument"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Required"),(0,i.kt)("th",{parentName:"tr",align:"left"},(0,i.kt)("center",null,"Description")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"PyArrayFrame")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"np.ndarray")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)(l.Z,{icon:p.Z,mdxType:"InlineIcon"})),(0,i.kt)("td",{parentName:"tr",align:"left"},"An array with a shape of ",(0,i.kt)("inlineCode",{parentName:"td"},"(H, W, C)"),", where ",(0,i.kt)("inlineCode",{parentName:"td"},"(H, W)")," are the source height (",(0,i.kt)("inlineCode",{parentName:"td"},"heightSrc"),") and source width (",(0,i.kt)("inlineCode",{parentName:"td"},"widthSrc"),") respectively. ",(0,i.kt)("inlineCode",{parentName:"td"},"C")," means the 3 RGB channel.")))),(0,i.kt)("h4",{id:"returns-2"},"Returns"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Argument"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},(0,i.kt)("center",null,"Description")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"is_success")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"bool")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The status of the frame pushing. If the given frame succeeds to be encoded and pushed, will return ",(0,i.kt)("inlineCode",{parentName:"td"},"True"),"; Otherwise, will return ",(0,i.kt)("inlineCode",{parentName:"td"},"False"),".")))),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"ffmpegclose"},(0,i.kt)("inlineCode",{parentName:"h3"},"FFmpegClose")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"sev.FFmpegClose()\n")),(0,i.kt)("p",null,"Close the video stream and release the connection. Calling this method will flush all buffered frames into the video stream. In some cases, the video tail will be writen to the stream. If users does not call this method explicitly, it will be called when ",(0,i.kt)("inlineCode",{parentName:"p"},"clear()")," is called or when the server is destructed."),(0,i.kt)("h2",{id:"operators"},"Operators"),(0,i.kt)("h3",{id:"__str__"},(0,i.kt)("inlineCode",{parentName:"h3"},"__str__")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"info = str(enc)\n")),(0,i.kt)("p",null,"Return a brief report of the current stream encoder status."),(0,i.kt)("h4",{id:"returns-3"},"Returns"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Argument"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},(0,i.kt)("center",null,"Description")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"info")),(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"str")),(0,i.kt)("td",{parentName:"tr",align:"left"},"A brief report of the stream encoder status, the configurations and parameters will be listed as formatted texts.")))),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"../examples/server"},(0,i.kt)("em",{parentName:"a"},(0,i.kt)("inlineCode",{parentName:"em"},"Server")))," in the tutorial. Here we also show some specific configurations:"),(0,i.kt)("h3",{id:"optimize-the-video-encoding"},"Optimize the video encoding"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"...\ndec = mpegCoder.MpegDecoder()\n...\nsev = mpegCoder.MpegServer()\nsev.setParameter(decoder=dec, codecName='libx265', videoAddress='rtsp://localhost:8554/video', GOPSize=24, maxBframe=16)\n...\n")),(0,i.kt)("h3",{id:"rescale-and-resample-the-video"},"Rescale and resample the video"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"...\nsev = mpegCoder.MpegServer()\nsev.setParameter(width=1280, height=720, frameRate=(5, 1), GOPSize=12, codecName='libx265', videoAddress='rtsp://localhost:8554/video')\n...\n")),(0,i.kt)("h3",{id:"use-multi-thread-encoding"},"Use multi-thread encoding"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"...\nsev = mpegCoder.MpegServer()\nsev.setParameter(nthread=8)\n...\n")),(0,i.kt)("h3",{id:"configure-the-ahead-frame-number-manually"},"Configure the ahead frame number manually"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"...\nsev = mpegCoder.MpegServer()\nsev.setParameter(decoder=d, codecName='libx265', videoAddress='rtsp://localhost:8554/video', GOPSize=24, frameAhead=48)\n...\n")))}f.isMDXComponent=!0}}]);